from telegram import Update
from telegram.ext import ContextTypes

import telegram

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    welcome_text = (
        "üëã *Benvenuto nello SMART DISPENSER BOT!* üè†ü§ñ\n\n"
        "Sono qui per aiutarti a gestire i tuoi dispensatori di medicinali e monitorare la salute nella tua casa intelligente.\n\n"
        "‚úÖ Registra dispensatori\n"
        "‚úÖ Monitora l'assunzione dei medicinali\n"
        "‚úÖ Ricevi notifiche su temperatura e umidit√†\n"
        "‚úÖ Controlla accessi e molto altro\n\n"
        "üìö Usa il comando `/help` per vedere tutte le funzionalit√† disponibili.\n\n"
        "Sono felice di aiutarti a prenderti cura della salute dei tuoi cari! üíä‚ù§Ô∏è"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown")

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Fornisce una guida dettagliata e accurata di tutti i comandi disponibili."""
    
    # Ottieni lo stato di login e il ruolo dell'utente
    is_logged_in = 'user_db_id' in context.user_data
    username = context.user_data.get('username')
    user_role = context.user_data.get('role')
    
    # --- Intestazione e comandi base (per tutti) ---
    help_text = "ü§ñ *SMART HOME HEALTH BOT - GUIDA COMPLETA*\n\n"
    
    help_text += "--- *COMANDI GENERALI* ---\n"
    help_text += "‚Ä¢ `/start` ‚Äì Avvia l'interazione col bot.\n"
    help_text += "‚Ä¢ `/help` ‚Äì Mostra questa guida.\n\n"
    
    help_text += "--- *GESTIONE ACCOUNT* ---\n"
    help_text += "‚Ä¢ `/register <username> <password>` ‚Äì Crea un nuovo account supervisore.\n"
    help_text += "  _Esempio:_ `/register mario.rossi sup3rPwd!`\n"
    help_text += "‚Ä¢ `/login <username> <password>` ‚Äì Esegue l'accesso.\n"
    help_text += "  _Esempio:_ `/login mario.rossi sup3rPwd!`\n"
    help_text += "‚Ä¢ `/logout` ‚Äì Chiude la sessione corrente.\n"
    help_text += "‚Ä¢ `/status` ‚Äì Verifica il tuo stato di login.\n\n"
    
    # --- Sezioni specifiche per ruolo ---
    if is_logged_in:
        if user_role == "supervisor":
            help_text += "üè° *GESTIONE SMART HOME E PAZIENTI (Supervisore)*\n"
            help_text += "‚Ä¢ `/create_smart_home <nome>` ‚Äì Crea una nuova casa smart (Digital Twin).\n"
            help_text += "  _Esempio:_ `/create_smart_home Casa Nonna Maria`\n"
            help_text += "‚Ä¢ `/list_smart_homes` ‚Äì Elenca tutte le tue case smart.\n"
            help_text += "‚Ä¢ `/create_patient <username> <password> <dt_id>` ‚Äì Crea un account paziente e lo collega a una casa smart.\n"
            help_text += "  _Esempio:_ `/create_patient luigiverdi pwdPaziente 65a1b2...`\n"
            help_text += "‚Ä¢ `/link_dispenser <dt_id> <dispenser_id>` ‚Äì Collega un dispenser a una casa smart.\n"
            help_text += "  _Esempio:_ `/link_dispenser 65a1b2... 001-paracetamolo`\n"
            help_text += "‚Ä¢ `/smart_home_devices <dt_id>` ‚Äì Mostra i dispositivi di una casa smart.\n"
            help_text += "‚Ä¢ `/delete_smart_home <dt_id>` ‚Äì Elimina una casa smart.\n"
            help_text += "‚Ä¢ `/smart_home_telegrams` ‚Äì Mostra gli ID Telegram associati.\n\n"

            help_text += "üíä *GESTIONE DISPENSER E TERAPIA (Supervisore)*\n"
            help_text += "‚Ä¢ `/add_dispenser <id_univoco> <nome>` ‚Äì Registra un nuovo dispenser fisico.\n"
            help_text += "  _Esempio:_ `/add_dispenser 001-paracetamolo Dispenser Salotto`\n"
            help_text += "‚Ä¢ `/my_dispensers` ‚Äì Elenca i tuoi dispenser registrati.\n"
            help_text += "‚Ä¢ `/set_dispenser_time <id> <inizio> <fine>` ‚Äì Imposta la fascia oraria per l'assunzione.\n"
            help_text += "  _Esempio:_ `/set_dispenser_time 001-paracetamolo 08:30 09:00`\n"
            help_text += "‚Ä¢ `/delete_dispenser <id_dispenser>` ‚Äì Rimuove un dispenser.\n\n"

            help_text += "üî¨ *MONITORAGGIO E CONTROLLO (Supervisore)*\n"
            help_text += "‚Ä¢ `/send_dispenser_message <id> <msg>` ‚Äì Invia un messaggio al display del dispenser.\n"
            help_text += "  _Esempio:_ `/send_dispenser_message 001-paracetamolo Ricorda acqua!`\n"
            help_text += "‚Ä¢ `/dispenser_adherence <dt_id>` ‚Äì Mostra l'aderenza terapeutica settimanale.\n"
            help_text += "‚Ä¢ `/door_history <id> [n|inizio fine]` ‚Äì Cronologia eventi dello sportello.\n"
            help_text += "  _Esempio:_ `/door_history 001-paracetamolo 50`\n"
            help_text += "‚Ä¢ `/environment_data <id> [n|inizio fine]` ‚Äì Mostra dati ambientali (temp/umidit√†).\n"
            help_text += "‚Ä¢ `/set_environment_limits <id> <tipo> <min> <max>` ‚Äì Imposta soglie per allarmi ambientali (temp/humidity).\n"
            help_text += "  _Esempio:_ `/set_environment_limits 001-paracetamolo temp 18 26`\n" # Corretto il refuso qui
            help_text += "‚Ä¢ `/check_smart_home_alerts` ‚Äì Controlla e notifica tutte le irregolarit√† attive.\n\n"

        elif user_role == "patient":
            help_text += "--- *COMANDI DISPONIBILI (Paziente)* ---\n"
            help_text += "Come paziente, puoi usare i comandi `/logout` e `/status`.\n"
            help_text += "Per qualsiasi necessit√†, contatta il tuo supervisore.\n\n"
    else:
        # Utente non loggato
        help_text += "Per accedere ai comandi specifici per ruolo, esegui il login o registrati come supervisore.\n\n"

    # --- Stato attuale ---
    help_text += "--- *STATO ATTUALE* ---\n"
    if is_logged_in:
        role_display = "Supervisore" if user_role == "supervisor" else "Paziente"
        help_text += f"‚úÖ Sei connesso come: *{username}*\n"
        help_text += f"üë§ Ruolo: *{role_display}*\n"
        help_text += f"üÜî Il tuo ID Telegram: `{update.effective_user.id}`"
    else:
        help_text += "‚ùå Non hai effettuato l'accesso."
        
    # Invia il messaggio completo
    try:
        await update.message.reply_text(help_text, parse_mode=telegram.constants.ParseMode.MARKDOWN)
    except telegram.error.BadRequest as e:
        print(f"Errore durante l'invio del messaggio di aiuto: {e}")
        # Invia una versione semplificata senza formattazione come fallback
        await update.message.reply_text(help_text)


async def echo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Echo handler that replies with the same message received"""
    await update.message.reply_text(update.message.text)